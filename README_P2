Dave Sizer 
CS370 
P2

For each implemented syscall, there is a wrapper program meant to be run from
the user space of the kernel to help with testing.  These are in the wrappers/
subdirectory in the repo

Syscalls Implemented:

steal:
-----

This call makes the target pid as if it had been run by root.

Test case: 
Call the wrapper to execute the call on the current bash shell.  The
shell then executes its commands as root.  Can be shown easily by executing a
new bash subshell.

quad:
-----

This call quadruples the time slice of a process.

Test case:
Call the wrapper program on any process, and the wrapper will print the new
timeslice value after quadrupling.  It can be called again to verify.

swipe:
-----

This call takes a target and a victim pid, and "steals" (sets to zero) the
timeslices from the victim and its children and gives the time to the target's
timeslice. There seems to be a strange issue where I'm getting structs that have
time_slice values of -1 (even though they are unsigned?). You see this in my
screencast.  I made a patch? to ignore the values if this is the case.

Test case:
Note the pid of the current bash shell.  Create a new child bash shell and run
some processes in it.  Create further subshells and repeat if desired.  Run the
wrapper with the target as the main shell and the victim as the first bash
subshell.  The wrapper will output the total time stolen.

zombify:
-----

Force the target process into zombie state.  It should be noted that this
function simply puts the target to TASK_UNINTERRUPTABLE and sets its exit state
to EXIT_ZOMBIE.  It does not do all of the cleanup done by do_exit(), nor does
it notify the parent like do_exit() does.  In fact, it seems like something else
important that is done by do_exit() that is not done by this call is clean up a
processes paging/memory information.  Although the call seems to make the target
process a zombie, some time after calling it the kernel fails with a null
reference in the do_sys_poll() function, which seems to have something to do
with paging.

Test case:
Call the wrapper on a process.  The process will exit.  Further, you can see the
process appear as a zombie in top.

myjoin:
-----

Sleeps the current process in an uninterruptable manner until the target process
exits.

Test case:
Spawn a child process that does useless looping for a certain amount of time,
and call the syscall with this child process as the target.  The process is
uninterruptable until this child exits.  The wrapper takes care of the whole
test.

forcewrite:
-----

Alternate version of sys_write that ignores file permissions and writes anyway.
This is accomplished by adding a custom version of the vfs_write() function in
fs/read_write.c.  This is where file permissions of the file being written to
are checked.  Before actually writing, this function checks if the write bit is
included in the file structure's mode field, set at the point of opening the
file.  My version simply does not perform this check and writes anyway.  For the
actual syscall, I simply copied the existing sys_write code and replaced the
call to vfs_write() with a call to my modified version.

Test case:
Have root create a file in the /root directory that only it can write to.  Pass
this file path to the wrapper.  The wrapper will use the new syscall to append
to this file, even though the calling user doesn't have the correct permissions.
